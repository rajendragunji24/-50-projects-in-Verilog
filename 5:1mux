  RTL CODE
  `timescale 1ns / 1ps

module mux5to1(
    input [4:0] data_in,    // 5 input channels
    input [2:0] sel,        // 3-bit select (only 0-4 used)
    output reg out          // output
);

always @(*) begin
    case(sel)
        3'b000: out = data_in[0];
        3'b001: out = data_in[1];
        3'b010: out = data_in[2];
        3'b011: out = data_in[3];
        3'b100: out = data_in[4];
        default: out = 1'b0; // default case for invalid select
    endcase
end

endmodule

         TEST BENCH
 `timescale 1ns / 1ps

module tb_mux5to1();

// Inputs
reg [4:0] data_in;
reg [2:0] sel;

// Output
wire out;

// Instantiate the Unit Under Test (UUT)
mux5to1 uut (
    .data_in(data_in),
    .sel(sel),
    .out(out)
);

initial begin
    // Initialize Inputs
    data_in = 5'b00000;
    sel = 3'b000;
    
    // Wait 100 ns for global reset to finish
    #100;
    
    // Stimulus
    data_in = 5'b10101; // Set input pattern
    
    // Test all select lines
    sel = 3'b000; #100; // Select input 0 (should output 1)
    sel = 3'b001; #100; // Select input 1 (should output 0)
    sel = 3'b010; #100; // Select input 2 (should output 1)
    sel = 3'b011; #100; // Select input 3 (should output 0)
    sel = 3'b100; #100; // Select input 4 (should output 1)
    
    // Test some invalid select values
    sel = 3'b101; #100; // Invalid select (should output 0)
    sel = 3'b110; #100; // Invalid select (should output 0)
    sel = 3'b111; #100; // Invalid select (should output 0)
    
    // Change input pattern and test again
    data_in = 5'b11010;
    sel = 3'b000; #100; // Should output 0
    sel = 3'b001; #100; // Should output 1
    sel = 3'b010; #100; // Should output 0
    sel = 3'b011; #100; // Should output 1
    sel = 3'b100; #100; // Should output 1
    
    // Finish simulation
    #100;
    $finish;
end

endmodule 
