RTL CODE
module gray_binary_converter (
    input  [3:0] gray_in,
    output [3:0] binary_out
);
    assign binary_out[3] = gray_in[3];
    assign binary_out[2] = gray_in[3] ^ gray_in[2];
    assign binary_out[1] = gray_in[3] ^ gray_in[2] ^ gray_in[1];
    assign binary_out[0] = gray_in[3] ^ gray_in[2] ^ gray_in[1] ^ gray_in[0];
endmodule


test bench
`timescale 1ns / 1ps

module gray_binary_converter_tb;
    reg [3:0] gray_in;
    wire [3:0] binary_out;

    // Instantiate the DUT (Device Under Test)
    gray_binary_converter uut (
        .gray_in(gray_in),
        .binary_out(binary_out)
    );

    initial begin
        $monitor("Time = %0t | gray_in = %b | binary_out = %b", $time, gray_in, binary_out);

        gray_in = 4'b0000; #10;
        gray_in = 4'b0001; #10;
        gray_in = 4'b0010; #10;
        gray_in = 4'b0011; #10;
        gray_in = 4'b0100; #10;
        gray_in = 4'b0101; #10;
        gray_in = 4'b0110; #10;
        gray_in = 4'b0111; #10;
        gray_in = 4'b1000; #10;
        gray_in = 4'b1001; #10;
        gray_in = 4'b1010; #10;
        gray_in = 4'b1011; #10;
        gray_in = 4'b1100; #10;
        gray_in = 4'b1101; #10;
        gray_in = 4'b1110; #10;
        gray_in = 4'b1111; #10;

        $finish;
    end
endmodule
