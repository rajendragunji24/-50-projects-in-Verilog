RTL CODDE
`timescale 1ns / 1ps
module ALU (
    input  [7:0] a,
    input  [7:0] b,
    input  [2:0] sel,   // Operation selector
    output reg [7:0] result,
    output reg carry,
    output reg zero
);

always @(*) begin
    carry = 0;
    case (sel)
        3'b000: result = a + b;                      
        3'b001: result = a - b;                      
        3'b010: result = a & b;                      
        3'b011: result = a | b;                    
        3'b100: result = a ^ b;                      
        3'b101: result = a < b;      
        3'b110: result = a > b;             
        3'b111: result = ~a;    
        default: result = 8'd0;
    endcase

    zero = (result == 8'd0) ? 1 : 0;
end

endmodule

         TEST BENCH 
  `timescale 1ns / 1ps
module ALUTB_v;
	// Inputs
	reg [7:0] a;
	reg [7:0] b;
	reg [2:0] sel;
	// Outputs
	wire [7:0] result;
	wire carry;
	wire zero;
	// Instantiate the Unit Under Test (UUT)
	ALU uut (
		.a(a), 
		.b(b), 
		.sel(sel), 
		.result(result), 
		.carry(carry), 
		.zero(zero)
	);
	initial begin
		// Initialize Inputs
		a = 8'd20; b = 8'd10; sel = 3'b000;#10;
		a = 8'd30; b = 8'd10; sel = 3'b001;#10;
		a = 8'b11001100; b = 8'b10101010; sel = 3'b010;#10;
	   a = 8'b11001100; b = 8'b10101010; sel = 3'b011;#10;
	   a = 8'b11001100; b = 8'b10101010; sel = 3'b100;#10;
		a = 8'd15; b = 8'd50; sel = 3'b101;#10;
		a = 8'd100; b = 8'd20; sel = 3'b011;#10;
		a = 8'b11110000; b = 8'b00000000; sel = 3'b111;#10;
		// Wait 100 ns for global reset to finish
		#100;$finish;
        
		// Add stimulus here

	end
      
endmodule

