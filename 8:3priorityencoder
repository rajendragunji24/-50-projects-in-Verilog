RTL CODE  
`timescale 1ns / 1ps
module priorityencoder (
    input  [7:0] I,         // 8 input lines
    output reg [2:0] Y,     // 3-bit output
    output reg valid        // Output valid bit
);

always @(*) begin
    valid = 1'b1;
    casex (I)
        8'b1xxxxxxx: Y = 3'b111;
        8'b01xxxxxx: Y = 3'b110;
        8'b001xxxxx: Y = 3'b101;
        8'b0001xxxx: Y = 3'b100;
        8'b00001xxx: Y = 3'b011;
        8'b000001xx: Y = 3'b010;
        8'b0000001x: Y = 3'b001;
        8'b00000001: Y = 3'b000;
        default: begin
            Y = 3'b000;
            valid = 1'b0;
        end
    endcase
end

endmodule

   TEST BENCH
  module tb_priority_encoder_8to3;
    reg  [7:0] I;
    wire [2:0] Y;
    wire valid;

    priority_encoder_8to3 uut (
        .I(I),
        .Y(Y),
        .valid(valid)
    );

    initial begin
        

       I = 8'b00000000; #10; // No input active
        I = 8'b00000001; #10; // LSB active -> output 000
        I = 8'b00000100; #10; // Bit 2 active -> output 010
        I = 8'b00100010; #10; // Bit 5 has higher priority -> output 101
        I = 8'b10000001; #10; // Bit 7 highest -> output 111
        I = 8'b01000000; #10; // Bit 6 active -> output 110
        I = 8'b00010000; #10; // Bit 4 active -> output 100

        $finish;
    end
endmodule
