RTL CODE
`timescale 1ns / 1ps
module seq_1011_moore(
    input clk,rst,x,
    output reg z 
    );
   parameter s0 = 3'b000;
   parameter s1 = 3'b001;
   parameter s2 = 3'b010;
   parameter s3 = 3'b011;
   parameter s4 = 3'b100;
   
   reg [2:0] cst, nst;
   
   always @(posedge clk) begin
       if(rst)
         cst <= s0;
       else
         cst <= nst;
    end
    
    always @(*)begin
        case(cst)
            s0: nst = x ? s1 : s0;
            s1: nst = x ? s1 : s2;
            s2: nst = x ? s3 : s0;
            s3: nst = x ? s4 : s2;
            s4: nst = x ? s1 : s0;
         default:
             nst = s0;
     endcase
  end
  
    always@(*) begin
         if(cst == s4)
            z=1;
         else
            z=0;
        end
endmodule

test bench
`timescale 1ns / 1ps

module seq_1011_moore_tb;

    // Testbench signals
    reg clk;
    reg rst;
    reg x;
    wire z;

    // Instantiate the DUT (Device Under Test)
    seq_1011_moore uut (
        .clk(clk),
        .rst(rst),
        .x(x),
        .z(z)
    );

    // Clock generation: 10ns period (100MHz)
    initial begin
        clk = 0;
        forever #5 clk = ~clk;  // Toggle clock every 5ns
    end
    
    initial begin
       rst=1;
       #10; rst=0;
   end
   
   initial begin
      $monitor("Time=%0t | clk=%b | rst=%b | x=%b | z=%b", $time, clk, rst, x, z);
   x=1; #10;
   x=0; #10;
   x=1; #10;
   x=1; #10;
 #100; $finish;
 end
 endmodule
