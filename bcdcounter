RTL CODE
`timescale 1ns / 1ps
module bcdcounter(
   input clk,rst,load,
   input [3:0]data_in,
   output reg[3:0]q

    );
    always @(posedge clk)begin
      if(rst)begin
        q<=4'b0000;
      end
     else if(load)begin
       q<=data_in;
     end
     else if(q==4'b1001)begin
      q<=4'b0000;
     end
     else begin
      q<=q+1'b1;
     end
    end
       
endmodule

test bench
`timescale 1ns / 1ps
module bcdcountertb;
    reg clk,rst,load;
    reg [3:0]data_in;
    wire [3:0]q;
    
    bcdcounter uut(
      .clk(clk),
      .rst(rst),
      .load(load),
      .data_in(data_in),
      .q(q)
      );
      
      initial begin
        clk=0;
      forever #5 clk=~clk;
      end
      
      initial begin 
        rst=1; 
        #10; rst=1;
      end
      
      initial begin
        $monitor("Time=%0t | clk=%b | rst=%b | load=%b | data_in=%b | q=%b", $time, clk, rst, data_in, load, q);
        load=1; data_in=4'b0000;#10;
        load=1; data_in=4'b0001;#10;
        load=1; data_in=4'b0010;#10;
        load=1; data_in=4'b0011;#10;
        load=1; data_in=4'b0100;#10;
        load=1; data_in=4'b0101;#10;
        load=1; data_in=4'b0110;#10;
        load=1; data_in=4'b0111;#10;
        load=1; data_in=4'b1000;#10;
        load=1; data_in=4'b1001;#10;
       $finish;
       end
endmodule
