RTL CODE
`timescale 1ns / 1ps
module binary_gray_converter(
     input[3:0]binary_in,
     output[3:0]gray_out
     );
    assign gray_out[3] = binary_in[3];
    assign gray_out[2] = binary_in[3] ^ binary_in[2];
    assign gray_out[1] = binary_in[2] ^ binary_in[1];
    assign gray_out[0] = binary_in[1] ^ binary_in[0];
endmodule

     test bench
    `timescale 1ns / 1ps
module binary_gray_converter_tb;
      reg[3:0 ]binary_in;
      wire[3:0]gray_out;
      
      binary_gray_converter uut(
           .binary_in(binary_in),
           .gray_out(gray_out)
           );
           initial begin
              $monitor("Time = %0t | binary_in = %b | gray_out = %b", $time, binary_in, gray_out);
        binary_in = 4'b0000; #10;
        binary_in = 4'b0001; #10;
        binary_in = 4'b0010; #10;
        binary_in = 4'b0011; #10;
        binary_in = 4'b0100; #10;
        binary_in = 4'b0101; #10;
        binary_in = 4'b0110; #10;
        binary_in = 4'b0111; #10;
        binary_in = 4'b1000; #10;
        binary_in = 4'b1001; #10;
        binary_in = 4'b1010; #10;
        binary_in = 4'b1011; #10;
        binary_in = 4'b1100; #10;
        binary_in = 4'b1101; #10;
        binary_in = 4'b1110; #10;
        binary_in = 4'b1111; #10;
     $finish;
   end
endmodule
