RTL CODE 
`timescale 1ns / 1ps
module jk_ff(
  input clk,rst,j,k,
  output reg q
 );
 always @(posedge clk or negedge rst)begin
   if(!rst)begin
     q<=1'b0;
   end
   else begin
    case({j,k})
     2'b00: q <= q;
     2'b01: q <= 1'b0;
     2'b10: q <= 1'b1;
     2'b11: q <= ~q;
   endcase
  end
 end
endmodule

 test bench
`timescale 1ns / 1ps
module jk_ff_tb;
   reg clk,rst,j,k;
   wire q;
   
   jk_ff uut(
     .clk(clk),
     .rst(rst),
     .j(j),
     .k(k),
     .q(q)
     );
     initial begin
     clk=0;
     forever #5 clk=~clk;
     end
     
     initial begin
     clk=0; rst=1; j=0; k=0;
     #10; rst=0;
     end
     
     initial begin
       $monitor("Time=%0t | clk=%b rst=%b j=%b k=%b | q=%b", $time, clk, rst, j, k, q);
       j=0; k=0;#10;
       j=0; k=1;#10;
       j=1; k=0;#10;
       j=1; k=1;#10;
     $finish;
    end
endmodule
